vcov(m4.1)
diag(vcov(m4.1))
cov2cor(vcov(m4.1))
precis(post)
#prior predicitve distribution
set.seed(2971)
N <- 1000
a <- rnorm (N, 178,  20)
b <- rnorm (N, 0, 10)
#plot lines: possible outcome space
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400)
xlab="weight" , ylab="height")
#plot lines: possible outcome space
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400),
xlab="weight" , ylab="height")
abline( h=0 , lty=2 )
abline( h=272 , lty=1 , lwd=0.5 )
mtext( "b ~ dnorm(0,10)" )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar)
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar)
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar),
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
dens(b, xlim = c(0,5), adj = 0.1)
#new prior: restrict it to positive values
b <- rlnorm( le4, 0, 1)
dens(b, xlim = c(0,5), adj = 0.1)
plot( NULL , xlim=range(d2$weight) , ylim=c(-100,400),
xlab="weight" , ylab="height")
abline( h=0 , lty=2 )
abline( h=272 , lty=1 , lwd=0.5 )
mtext( "log(b) ~ dnorm(0,1)" )
xbar <- mean(d2$weight)
for ( i in 1:N ) curve( a[i] + b[i]*(x - xbar),
from=min(d2$weight) , to=max(d2$weight) , add=TRUE ,
col=col.alpha("black",0.2) )
#approximate the posterior
library(rethinking)
data("Howell1")
d <- Howell1
d2 <- d[d$age >= 18,]
#average weight
xbar <- mean(d2$weight)
#fit model
m4.3 <- quap(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * (weight ~ xbar),
a ~ dnorm (178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0, 50)
),
data = d2
)
xbar <- mean(d2$weight)
#fit model
m4.3 <- quap(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * (weight ~ xbar),
a ~ dnorm (178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0, 50)
),
data = d2
)
#fit model
m4.3 <- quap(
alist(
height ~ dnorm(mu, sigma),
mu <- a + b * (weight - xbar),
a ~ dnorm (178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0, 50)
),
data = d2
)
#
precis (m4.3)
plot(height ~ weight, data = d2, col = rangi2)
post <- extract.samples(m4.3)
a_map <- mean(post$a)
b_map <- mean(post$b)
curve(a_map + b_map*(x - xbar), add = TRUE)
setwd("C:/Users/reich/Documents/GitHub/CScond_PreTest/data")
#setwd("\\\\sn00.zdv.uni-tuebingen.de/siskr01/Documents/Github/CScond_Exp2/data")
library(dplyr)
library(tidyverse)
library(ggplot2)
##### import:
#single data files
##### export:
#direct.csv
#memory1.csv
#memory2.csv
#Functions
CI <- function(x) qnorm(0.975)*sd(x)/sqrt(length(x))
se <- function(x) sd(x)/sqrt(length(x))
# read files --------------------------------------------------------------
filenames <- dir()
dat <- data.frame()
for (i in filenames){
dat <- rbind(dat, read.table(i, header = TRUE, sep = ",", encoding = "UTF-8"))
}
rm (filenames, i)
length(unique(dat$subject))
comments_one <- dat$responses[dat$trial_type == "survey-text" & dat$condition == "one_one"]
#comments_one
comments_many <- dat$responses[dat$trial_type == "survey-text" & dat$condition == "many_one"]
#comments_many
#delete irrelevant columns
olddat <- dat
dat <- dat[c("trial_index", "task", "subject", "condition", "type", "category", "response", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#variable cs_selected
as.factor(gsub(".png$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub(".jpg$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub("category", "", dat$cs_selected))-> dat$cs_selected
#transform to factor
as_factor <- c("subject", "condition", "type", "category", "timeout", "nr_pres","cs_selected")
for (factor in as_factor){
dat[, factor] <- as.factor(dat[,factor])
}
str(dat)
#separate data for three tasks
direct <- dat[dat$task == "direct",]
direct <- direct[c("trial_index", "task", "subject", "type", "category", "response", "rt", "cs_selected")]
memory1 <- dat[dat$task == "memory1",]
memory1 <- memory1[c("trial_index", "task", "subject", "condition1", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
memory2 <- dat[dat$task == "memory2",]
memory2 <- memory2[c("trial_index", "task", "subject", "condition2", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#export data files
setwd("C:/Users/reich/Documents/GitHub/CScond_PreTest/analysis")
write.csv2(direct, file = 'direct.csv')
write.csv2(memory1, file = 'memory1.csv')
write.csv2(memory2, file = 'memory2.csv')
# learning phases ---------------------------------------------------------
#presentation order and stimulus assignment
learning1 <- dat[dat$task == "learning1",]
learning1 <- learning1[c("subject", "trial_index", "cs_selected")]
learning1
learning2 <- dat[dat$task == "learning2",]
learning2 <- learning2[c("subject", "trial_index", "cs_selected")]
learning2$trial_index <- learning2$trial_index - 75
# "evaluation" filler task -----------------------------------------------------------
direct$response <- as.numeric(direct$response)
plotDirect <- aggregate(response ~ cs_selected + category, direct, mean)
aggregate(response ~ cs_selected + category, direct, sd)
plotDirect$se <- aggregate(response ~ cs_selected + category, direct, se)[[3]]
plotDirect <- ggplot(plotDirect, aes (x = cs_selected, y = response, fill = category)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Stimulus rating") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Categories") +
scale_y_continuous (name = "rating")
plotDirect
#exclude timeouts
dim(memory1)
memory1 <- memory1[memory1$timeout == "false",]
dim(memory1)
memory1$type <- factor(memory1$type)
memory1$memoryResp <- as.numeric(memory1$memoryResp)
#calculate proportions of "old" responses
#0 new
#1 old
memory1Prop <- aggregate(memoryResp ~ subject + condition1 + type, memory1, sum)
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type, memory1, length)[[4]]
memory1Prop$prop <- (memory1Prop$memoryResp/memory1Prop$nr)
memory1Prop
memory1Prop$se <- aggregate(prop ~ subject + condition1 + type, memory1Prop, se)[[4]]
#plot proportion of "old" responses
plotmemoryCorrrect <- ggplot(memory1Prop, aes (x = type, y = prop, fill = condition1)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemoryCorrrect
memory2 <- memory2[memory2$timeout == "false",]
memory2$type <- factor(memory2$type)
memory2$memoryResp <-
as.data.frame(with(memory2, table(memory, type)))
table(memory2$type)
#plot correct and incorrect responses
table(memory2$memoryCorrect, memory2$type)e
plotmemoryCorrrect <- ggplot(memory2, aes (x = memoryCorrect, y = memoryCorrect, fill = type)) +
facet_grid(. ~ condition)+
geom_point(show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("Stimulus rating") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_discrete (name = "response")
plotmemoryCorrrect
# memory2 task ------------------------------------------------------------
#exclude timeouts
dim(memory2)
memory2 <- memory2[memory2$timeout == "false",]
dim(memory1)
memory2Prop <- aggregate(memoryResp ~ subject + condition2 + type, memory2, sum)
memory2Prop$nr <- aggregate(memoryResp ~ subject + condition2 + type, memory2, length)[[4]]
memory2Prop$prop <- (memory2Prop$memoryResp/memory2Prop$nr)
memory2Prop
memory2Prop$se <- aggregate(prop ~ subject + condition2 + type, memory2Prop, se)[[4]]
#plot proportion of "old" responses
plotmemoryCorrrect <- ggplot(memory2Prop, aes (x = type, y = prop, fill = condition2)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemoryCorrrect
#plot proportion of "old" responses
plotmemory1Corrrect <- ggplot(memory1Prop, aes (x = type, y = prop, fill = condition1)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemory1Corrrect
plotmemory2Corrrect
memory2Prop$se <- aggregate(prop ~ subject + condition2 + type, memory2Prop, se)[[4]]
#plot proportion of "old" responses
plotmemory2Corrrect <- ggplot(memory2Prop, aes (x = type, y = prop, fill = condition2)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemory2Corrrect
#plot proportion of "old" responses
plotmemory2Corrrect <- ggplot(memory2Prop, aes (x = type, y = prop, fill = condition2)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Food") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemory2Corrrect
setwd("C:/Users/reich/Documents/GitHub/CScond_PreTest/data")
#setwd("\\\\sn00.zdv.uni-tuebingen.de/siskr01/Documents/Github/CScond_Exp2/data")
library(dplyr)
library(tidyverse)
library(ggplot2)
##### import:
#single data files
##### export:
#direct.csv
#memory1.csv
#memory2.csv
#Functions
CI <- function(x) qnorm(0.975)*sd(x)/sqrt(length(x))
se <- function(x) sd(x)/sqrt(length(x))
# read files --------------------------------------------------------------
filenames <- dir()
dat <- data.frame()
for (i in filenames){
dat <- rbind(dat, read.table(i, header = TRUE, sep = ",", encoding = "UTF-8"))
}
rm (filenames, i)
length(unique(dat$subject))
comments_one <- dat$responses[dat$trial_type == "survey-text" & dat$condition == "one_one"]
#comments_one
comments_many <- dat$responses[dat$trial_type == "survey-text" & dat$condition == "many_one"]
#comments_many
#delete irrelevant columns
olddat <- dat
dat <- dat[c("trial_index", "task", "subject", "condition", "type", "category", "response", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#variable cs_selected
as.factor(gsub(".png$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub(".jpg$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub("category", "", dat$cs_selected))-> dat$cs_selected
#transform to factor
as_factor <- c("subject", "condition", "type", "category", "timeout", "nr_pres","cs_selected")
for (factor in as_factor){
dat[, factor] <- as.factor(dat[,factor])
}
str(dat)
#separate data for three tasks
direct <- dat[dat$task == "direct",]
direct <- direct[c("trial_index", "task", "subject", "type", "category", "response", "rt", "cs_selected")]
memory1 <- dat[dat$task == "memory1",]
memory1 <- memory1[c("trial_index", "task", "subject", "condition1", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
memory2 <- dat[dat$task == "memory2",]
memory2 <- memory2[c("trial_index", "task", "subject", "condition2", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#export data files
setwd("C:/Users/reich/Documents/GitHub/CScond_PreTest/analysis")
write.csv2(direct, file = 'direct.csv')
write.csv2(memory1, file = 'memory1.csv')
write.csv2(memory2, file = 'memory2.csv')
# learning phases ---------------------------------------------------------
#presentation order and stimulus assignment
learning1 <- dat[dat$task == "learning1",]
learning1 <- learning1[c("subject", "trial_index", "cs_selected")]
learning1
learning2 <- dat[dat$task == "learning2",]
learning2 <- learning2[c("subject", "trial_index", "cs_selected")]
learning2$trial_index <- learning2$trial_index - 75
# "evaluation" filler task -----------------------------------------------------------
direct$response <- as.numeric(direct$response)
plotDirect <- aggregate(response ~ cs_selected + category, direct, mean)
aggregate(response ~ cs_selected + category, direct, sd)
plotDirect$se <- aggregate(response ~ cs_selected + category, direct, se)[[3]]
plotDirect <- ggplot(plotDirect, aes (x = cs_selected, y = response, fill = category)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Stimulus rating") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Categories") +
scale_y_continuous (name = "rating")
plotDirect
# memory1 task ------------------------------------------------------------
#exclude timeouts
dim(memory1)
memory1 <- memory1[memory1$timeout == "false",]
dim(memory1)
memory1$type <- factor(memory1$type)
memory1$memoryResp <- as.numeric(memory1$memoryResp)
#calculate proportions of "old" responses
#0 new
#1 old
memory1Prop <- aggregate(memoryResp ~ subject + condition1 + type, memory1, sum)
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type, memory1, length)[[4]]
memory1Prop$prop <- (memory1Prop$memoryResp/memory1Prop$nr)
memory1Prop
memory1Prop$se <- aggregate(prop ~ subject + condition1 + type, memory1Prop, se)[[4]]
#plot proportion of "old" responses
plotmemory1Corrrect <- ggplot(memory1Prop, aes (x = type, y = prop, fill = condition1)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "proportion of 'old' responses")
plotmemory1Corrrect
### true recognition
# prop "old" true target (CS) - prop "old" true target control (distractor)
#-1: always responding "old" to unstudied items and "new" to studied items
# 1: always responding "new" to unstudied items and "old" to studied items
memory1TrueRec <- memory1Prop[memory1Prop$type == "CS",]
names(memory1TrueRec)[names(memory1TrueRec) == "prop"] <- "propCS"
memory1TrueRec$propDis <- memory1Prop$prop[memory1Prop$type == "distractor"]
memory1TrueRec$score <- memory1TrueRec$propCS - memory1TrueRec$propDis
memory1TrueRec
plotTrueRec <- ggplot(memory1TrueRec, aes (x = condition, y = score)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
scale_y_continuous (name = "true recognition scores")
plotTrueRec
memory1Prop
memory1TrueRec <- memory1Prop[memory1Prop$type == "CS",]
names(memory1TrueRec)[names(memory1TrueRec) == "prop"] <- "propCS"
memory1TrueRec$propDis <- memory1Prop$prop[memory1Prop$type == "distractor"]
memory1TrueRec$score <- memory1TrueRec$propCS - memory1TrueRec$propDis
memory1TrueRec
plotmemory1Corrrect
memory1Prop
length(memory1Prop)
dim(memory1Prop)
dim(memory1Prop)[1]
line <- 1
memory1Prop$prop[line] == 0
memory1Prop$prop[2] == 0
for(line in 1:dim(memory1Prop)[1]){
if (memory1Prop$prop[line] == 0 | memory1Prop$prop[line == 1]){
memory1Prop$propAdj[line] <- 1/2*memory1Prop$prop[line]
}
}
memory1Prop$propAdj <- memory1Prop$prop
for(line in 1:dim(memory1Prop)[1]){
if (memory1Prop$prop[line] == 0 | memory1Prop$prop[line == 1]){
memory1Prop$propAdj[line] <- 1/2*memory1Prop$prop[line]
}
}
memory1Prop
1-1/2*4
1-(1/2*4)
1-(1/2*8)
1-(1/(2*8))
1-(1/(2*4))
(1/(2*4))
memory1Prop$propAdj <- memory1Prop$prop
nItems <- 4
for(line in 1:dim(memory1Prop)[1]){
if (memory1Prop$prop[line] == 0){
memory1Prop$propAdj[line] <- 1/(2*nItems)
} else if (memory1Prop$prop[line == 1]){
memory1Prop$propAdj[line] <- 1 - (1/(2*nItems))
}
}
memory1Prop$propAdj <- memory1Prop$prop
nItems <- 4
for(line in 1:dim(memory1Prop)[1]){
if (memory1Prop$prop[line] == 0){
memory1Prop$propAdj[line] <- 1/(2*nItems)
} else if (memory1Prop$prop[line] == 1){
memory1Prop$propAdj[line] <- 1 - (1/(2*nItems))
}
}
memory1Prop
### (2) studied items d' (discriminability, index of the amount of memory information encoded for list items relative to list item controls)
#z[hit rate studied items = CS] - z[false alarm rate studied word controls = distractor] -> see Gunter et al., 2007; Huff & Bodner, 2013
memory1Prop$propZ <- scale(memory1Prop$propAdj, center = TRUE, scale = TRUE)
memory1Prop
memory1studiedD <- memory1Prop[memory1Prop$type == "CS",]
names(memory1TrueRec)[names(memory1TrueRec) == "prop"] <- "propCS"
memory1studiedD$propDis <- memory1Prop$prop[memory1Prop$type == "distractor"]
memory1studiedD$score <- memory1studiedD$propCS - memory1studiedD$propDis
memory1studiedD
memory1studiedD <- memory1Prop[memory1Prop$type == "CS",]
names(memory1TrueRec)[names(memory1TrueRec) == "propZ"] <- "propZCS"
memory1studiedD$propZDis <- memory1Prop$propZ[memory1Prop$type == "distractor"]
memory1studiedD$score <- memory1studiedD$propZCS - memory1studiedD$propZDis
memory1studiedD
names(memory1studiedD)[names(memory1studiedD) == "propZ"] <- "propZCS"
memory1studiedD
memory1studiedD$type <- NULL
memory1studiedD
memory1studiedD$d <- memory1studiedD$propZCS - memory1studiedD$propZDis
memory1studiedD$type <- NULL
memory1studiedD
memory1unstudiedD <- memory1Prop[memory1Prop$type == "GSold",]
names(memory1unstudiedD)[names(memory1unstudiedD) == "propZ"] <- "propZCS"
memory1unstudiedD$propZDis <- memory1Prop$propZ[memory1Prop$type == "distractor"]
memory1unstudiedD$d <- memory1unstudiedD$propZCS - memory1unstudiedD$propZDis
memory1unstudiedD$type <- NULL
memory1unstudiedD
plotStudiedD <- ggplot(memory1studiedD, aes (x = condition1, y = d)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
scale_y_continuous (name = "sensitivty (d') of CSs")
plotStudiedD
plotUnstudiedD <- ggplot(memory1unstudiedD, aes (x = condition1, y = d)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
scale_y_continuous (name = "sensitivty (d') of GSs")
plotUnstudiedD
### (4) lambda (bias/ "monitoring"; index of how stringent strategic monitoring standards were at test)
#z[1 - false alarm rate distractor] -> see Gunter et al., 2007; Huff & Bodner, 2013
#higher lambda scores: index of more rigorous strategic monitoring standards applied to test (less often "old" response)
memory1Prop$propZ[memory1Prop$type == "distractor"]
### (4) lambda (bias/ "monitoring"; index of how stringent strategic monitoring standards were at test)
#z[1 - false alarm rate distractor] -> see Gunter et al., 2007; Huff & Bodner, 2013
#higher lambda scores: index of more rigorous strategic monitoring standards applied to test (less often "old" response)
memory1Prop$propAdj[memory1Prop$type == "distractor"]
### (4) lambda (bias/ "monitoring"; index of how stringent strategic monitoring standards were at test)
#z[1 - false alarm rate distractor] -> see Gunter et al., 2007; Huff & Bodner, 2013
#higher lambda scores: index of more rigorous strategic monitoring standards applied to test (less often "old" response)
memory1Lambda <- memory1Prop[memory1Prop$type == "distractor",]
memory1Lambda
memory1Lambda$distr <- 1 - memory1Lambda$propAdj
memory1Lambda <- memory1Prop[memory1Prop$type == "distractor",]
memory1Lambda$distr <- 1 - memory1Lambda$propAdj
memory1Lambda$lambda <- scale(memory1Lambda$dist, center = TRUE, scale = TRUE)
memory1Lambda
memory1Lambda$lambda <- scale(memory1Lambda$distr, center = TRUE, scale = TRUE)
memory1Lambda
#test for true recognition
trueRec <- memory1Prop[memory1Prop$type == "CS",]
trueRec
