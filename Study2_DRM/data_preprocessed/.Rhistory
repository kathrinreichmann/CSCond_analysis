for (line in 1:dim(temp)[1]){
if (temp$type[line] == "CS"){
temp$type_effect2[line] <- -0.5
} else if (temp$type[line] == "Dis") {
temp$type_effect2[line] <- 0.5
} else {
temp$type_effect2[line] <- 0
}
}
temp$type_effect2
str(temp)
#set default to dummy coding
options(contrasts = c("contr.treatment", "contr.poly"))
### specify models
memory <- temp
memory$memoryResp <- as.numeric(memory$memoryResp)
memory <- memory[order(memory$subject, memory$type, memory$category),]
str(memory)
memoryProp <- aggregate(memoryResp ~ subject + type + condition, memory, sum)
memoryProp$length <- aggregate(memoryResp ~ subject + type + condition, memory, length)[[4]]
memoryProp$prop <- memoryProp$memoryResp/memoryProp$length
hist(memoryProp$prop)
head(memoryProp)
##### analysis 1: glmers
memory$condition <- factor(memory$type, levels = c("many", "one", "fill"))
#random intercept for participants
glmer1 <- glmer(memoryResp ~ condition * type
+ (type|subject) + (type|cs_selected),
memory, binomial)
str(memory)
setwd(DRM)
memory <- read.csv2("memory1.csv", header = TRUE)
str(memory)
#delete columns we don't need
memory$X <- NULL
memory$memoryCorrect <- NULL
memory$trial_index <- NULL
memory$task <- NULL
memory$rt <- NULL
#rename condition
names(memory)[names(memory) == "condition1"] <- "condition"
#delete trials with timeout
memory <- memory[!memory$timeout == "true",]
str(memory)
#as factor
as_factor <- c("subject", "condition", "type", "category", "cs_selected")
for (factor in as_factor){
memory[, factor] <- as.factor(memory[,factor])
}
temp <- memory
# omit information we don't need
temp <- temp[!temp$type =="CSpred", ]
temp <- temp[!temp$type =="CSnonpred", ]
temp <- temp[!temp$type =="GSnew", ]
# order data
temp <- temp[order(temp$subject, temp$type),]
## rename many_one to many and one_one to one
temp$condition <- factor(temp$condition, labels = c("one", "many", "fill"), levels = c("one_one", "many_one", "many_fill"))
##categorical variable: generalization as discrete
temp$type <- factor(temp$type, labels = c("CS", "GS", "Dis"), levels = c("CS", "GSold", "distractor"))
head(temp)
## effect code variables
#condition, many = 0.5
temp$condition_effect1 <- 0
for (line in 1:dim(temp)[1]){
if (temp$condition[line] == "one"){
temp$condition_effect1[line] <- -0.5
} else if (temp$condition[line] == "many"){
temp$condition_effect1[line] <- 0.5
} else {
temp$condition_effect1[line] <- 0
}
}
temp$condition_effect1
#fill is 0.5
temp$condition_effect2 <- 0
for (line in 1:dim(temp)[1]){
if (temp$condition[line] == "one"){
temp$condition_effect2[line] <- -0.5
} else if (temp$condition[line] == "fill"){
temp$condition_effect2[line] <- 0.5
} else {
temp$condition_effect2[line] <- 0
}
}
temp$condition_effect2
#type, GS = 0.5
temp$type_effect1 <- 0
for (line in 1:dim(temp)[1]){
if (temp$type[line] == "CS"){
temp$type_effect1[line] <- -0.5
} else if (temp$type[line] == "GS") {
temp$type_effect1[line] <- 0.5
} else {
temp$type_effect1[line] <- 0
}
}
temp$type_effect1
str(temp)
#type, Dis = 0.5
temp$type_effect2 <- 0
for (line in 1:dim(temp)[1]){
if (temp$type[line] == "CS"){
temp$type_effect2[line] <- -0.5
} else if (temp$type[line] == "Dis") {
temp$type_effect2[line] <- 0.5
} else {
temp$type_effect2[line] <- 0
}
}
temp$type_effect2
str(temp)
#set default to dummy coding
options(contrasts = c("contr.treatment", "contr.poly"))
### specify models
memory <- temp
memory$memoryResp <- as.numeric(memory$memoryResp)
memory <- memory[order(memory$subject, memory$type, memory$category),]
str(memory)
memoryProp <- aggregate(memoryResp ~ subject + type + condition, memory, sum)
memoryProp$length <- aggregate(memoryResp ~ subject + type + condition, memory, length)[[4]]
memoryProp$prop <- memoryProp$memoryResp/memoryProp$length
hist(memoryProp$prop)
head(memoryProp)
##### analysis 1: glmers
memory$condition <- factor(memory$condition, levels = c("many", "one", "fill"))
#random intercept for participants
glmer1 <- glmer(memoryResp ~ condition * type
+ (type|subject) + (type|cs_selected),
memory, binomial)
summary(glmer1)
#random intercept and slope for stimuli for targets
glmer2 <- glmer(memoryResp ~ condition_effect1*type_effect1
+ (1|subject) + (1|cs_selected),
memory, binomial)
summary(glmer2)
#random intercept and slope for participants
glmer1 <- glmer(memoryResp ~ condition_effect1 * type_effect1 * condition_effect2 * type_effect2
+ (1|subject) + (1|cs_selected),
memory, binomial)
summary(glmer1)
#set default to dummy coding
options(contrasts = c("contr.sum", "contr.poly"))
#random intercept and slope for participants
glmer1 <- glmer(memoryResp ~ condition * type
+ (1|subject) + (1|cs_selected),
memory, binomial)
model.matrix(memoryResp ~ condition * type + (1|subject) + (1|cs_selected), memory)
model.matrix(memoryResp ~ condition * type, memory)
#set default to dummy coding
options(contrasts = c("contr.treatment", "contr.poly"))
model.matrix(memoryResp ~ condition_effect1 * type_effect1 * condition_effect2*type_effect2, memory)
setwd(DRM)
memory <- read.csv2("memory1.csv", header = TRUE)
str(memory)
#delete columns we don't need
memory$X <- NULL
memory$memoryCorrect <- NULL
memory$trial_index <- NULL
memory$task <- NULL
memory$rt <- NULL
#rename condition
names(memory)[names(memory) == "condition1"] <- "condition"
#delete trials with timeout
memory <- memory[!memory$timeout == "true",]
str(memory)
#as factor
as_factor <- c("subject", "condition", "type", "category", "cs_selected")
for (factor in as_factor){
memory[, factor] <- as.factor(memory[,factor])
}
temp <- memory
# omit information we don't need
temp <- temp[!temp$type =="CSpred", ]
temp <- temp[!temp$type =="CSnonpred", ]
temp <- temp[!temp$type =="GSnew", ]
temp <- temp[!temp$type == "distractor",]
temp <- temp[!temp$condition == "many_fill",]
# order data
temp <- temp[order(temp$subject, temp$type),]
## rename many_one to many and one_one to one
temp$condition <- factor(temp$condition, labels = c("one", "many"), levels = c("one_one", "many_one"))
##categorical variable: generalization as discrete
temp$type <- factor(temp$type, labels = c("CS", "GS"), levels = c("CS", "GSold"))
head(temp)
## effect code variables
#condition, one = 0.5
temp$condition_effect <- 0
for (line in 1:dim(temp)[1]){
if (temp$condition[line] == "one"){
temp$condition_effect[line] <- -0.5
} else {
temp$condition_effect[line] <- 0.5
}
}
temp$condition_effect
#type, GS = 0.5
temp$type_effect <- 0
for (line in 1:dim(temp)[1]){
if (temp$type[line] == "CS"){
temp$type_effect[line] <- -0.5
} else  {
temp$type_effect[line] <- 0.5
}
}
temp$type_effect
str(temp)
memory <- temp
memory$memoryResp <- as.numeric(memory$memoryResp)
memory <- memory[order(memory$subject, memory$type, memory$category),]
str(memory)
#for plotting
memoryProp <- aggregate(memoryResp ~ subject + type + condition, memory, sum)
memoryProp$length <- aggregate(memoryResp ~ subject + type + condition, memory, length)[[4]]
memoryProp$prop <- memoryProp$memoryResp/memoryProp$length
hist(memoryProp$prop)
head(memoryProp)
##### analysis 1: glmers
#set default to dummy coding
options(contrasts = c("contr.treatment", "contr.poly"))
#random intercept and slope for participants
glmer1 <- glmer(memoryResp ~ condition_effect * type_effect
+ (1|subject),
memory, binomial)
#random intercept and slope for stimuli for participants
glmer2 <- glmer(memoryResp ~ condition_effect*type_effect
+ (1|subject) + (1|cs_selected),
memory, binomial)
#random intercept and slope for stimuli for participants
glmer3 <- glmer(memoryResp ~ condition_effect*type_effect
+ (type_effect|subject) + (1|cs_selected),
memory, binomial)
#random intercept and slope for targets
glmer4 <- glmer(memoryResp ~ condition_effect*type_effect
+ (type_effect|subject) + (type_effect|cs_selected),
memory, binomial)
anova(glmer1, glmer2, glmer3, glmer4)
#model choice: glmer2
#analyze simple slopes (even though three-way-interaction is not significant)
glmer2_2 <- glmer(response ~ type + type:condition_effect
+ (1|subject) + (1|target), memory, binomial)
summary(glmer2_2)
#significant three-way interaction
#plot model1
memory_plot2 <- aggregate(prop ~ condition + type, memoryProp, mean)
memory_plot2$se <- aggregate(prop ~ condition + type, memoryProp, se)[[3]]
memory_plot2
barplot1 <- ggplot(memory_plot2, aes (y = prop, x = type, fill = condition)) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Proportion pleasant\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot1
#random intercept and slope for participants
glmer1 <- glmer(memoryResp ~ condition_effect * type_effect
+ (1|subject),
memory, binomial)
#random intercept and slope for stimuli for participants
glmer2 <- glmer(memoryResp ~ condition_effect*type_effect
+ (1|subject) + (1|cs_selected),
memory, binomial)
#random intercept and slope for stimuli for participants
glmer3 <- glmer(memoryResp ~ condition_effect*type_effect
+ (type_effect|subject) + (1|cs_selected),
memory, binomial)
#random intercept and slope for targets
glmer4 <- glmer(memoryResp ~ condition_effect*type_effect
+ (type_effect|subject) + (type_effect|cs_selected),
memory, binomial)
anova(glmer1, glmer2, glmer3, glmer4)
#analyze simple slopes (even though three-way-interaction is not significant)
glmer2_2 <- glmer(response ~ type_effect + type:condition_effect
+ (1|subject) + (1|target), memory, binomial)
#analyze simple slopes (even though three-way-interaction is not significant)
glmer2_2 <- glmer(memoryResp ~ type_effect + type:condition_effect
+ (1|subject) + (1|target), memory, binomial)
#analyze simple slopes (even though three-way-interaction is not significant)
glmer2_2 <- glmer(memoryResp ~ type_effect + type:condition_effect
+ (1|subject) + (1|cs_selected), memory, binomial)
summary(glmer2_2)
knitr::opts_chunk$set(echo = TRUE)
#plot model1
boxplot2 <- ggplot(directDiff, aes (x = type_specific, y = diff, color = condition)) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot2
#plot model1
boxplot2 <- ggplot(directDiff, aes (x = type_specific, y = diff, color = condition)) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot2
boxplot1 <- ggplot(direct, aes (x = val, y = response, color = condition)) +
facet_grid(. ~ type_specific) +
geom_boxplot() +
geom_line(show.legend = TRUE, aes (x = val, color = condition)) +
ggtitle("Direct Evaluative Ratings\n") +
geom_smooth(method = "lm", color = "black", se = FALSE) +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
boxplot1 <- ggplot(direct, aes (x = type_specific, y = response, color = val)) +
facet_grid(. ~ condition) +
geom_boxplot() +
geom_line(show.legend = TRUE, aes (x = val, color = val)) +
ggtitle("Direct Evaluative Ratings\n") +
geom_smooth(method = "lm", color = "black", se = FALSE) +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
boxplot1 <- ggplot(direct, aes (x = type_specific, y = response, color = val)) +
facet_grid(. ~ condition) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
barplot1 <- ggplot(indirect_plot1, aes (y = diff, x = type_specific, fill = condition)) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= diff - se, ymax= diff + se), width=.2,
position=position_dodge(.9)) +
ggtitle("AMP\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(fill = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot1
barplot1 <- ggplot(indirect_plot1, aes (y = diff, x = type_specific, fill = condition)) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= diff - se, ymax= diff + se), width=.2,
position=position_dodge(.9)) +
ggtitle("AMP\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(fill = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot1
#set directory
knitr::opts_knit$set(root.dir = "C:/Users/reich/Documents/GitHub/CSCond_analysis/Study1_EC/data")
#set directory
knitr::opts_knit$set(root.dir = "C:/Users/siskr01/GitHub/CSCond_analysis/Study1_EC/data")
#plot model1
boxplot2 <- ggplot(directDiff, aes (x = type_specific, y = diff, color = condition)) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot2
barplot1 <- ggplot(indirect_plot1, aes (y = diff, x = type_specific, fill = condition)) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= diff - se, ymax= diff + se), width=.2,
position=position_dodge(.9)) +
ggtitle("AMP\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(fill = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1 <- ggplot(direct, aes (x = val, y = response, color = type_specifi)) +
facet_grid(. ~ condition) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Type") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
boxplot1 <- ggplot(direct, aes (x = val, y = response, color = type_specific)) +
facet_grid(. ~ condition) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Type") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
boxplot1 <- ggplot(direct, aes (x = val, y = response, color = condition)) +
facet_grid(. ~ type_specific) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Type") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
boxplot1 <- ggplot(direct, aes (x = type_specific, y = response, color = condition)) +
facet_grid(. ~ val) +
geom_boxplot() +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Evaluative Ratings\n") +
theme_classic() +
labs(color = "Type") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
boxplot1
barplot1 <- ggplot(indirect_plot1, aes (y = diff, x = type_specific, fill = condition)) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= diff - se, ymax= diff + se), width=.2,
position=position_dodge(.9)) +
ggtitle("AMP\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Type") +
scale_y_continuous (name = "Difference Scores\n") +
theme_classic() +
labs(fill = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot1
barplot2 <- ggplot(indirect_plot2, aes (y = prop, x = type_specific, fill = val)) +
facet_grid(. ~ condition) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
geom_hline(yintercept = 0.5, col = "black") +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Proportion pleasant\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot2
barplot2 <- ggplot(indirect_plot2, aes (y = prop, x = type_specific, fill = condition)) +
facet_grid(. ~ val) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
geom_hline(yintercept = 0.5, col = "black") +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Proportion pleasant\n") +
theme_classic() +
labs(color = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot2
barplot2 <- ggplot(indirect_plot2, aes (y = prop, x = type_specific, fill = condition)) +
facet_grid(. ~ val) +
geom_col(position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
geom_hline(yintercept = 0.5, col = "black") +
ggtitle("Direct Evaluative Ratings\n") +
scale_color_brewer(palette = "Set2") +
scale_x_discrete(name = "\n Valence") +
scale_y_continuous (name = "Proportion pleasant\n") +
theme_classic() +
labs(fill = "Condition") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=14))
barplot2
