#create plot
plotStudiedD <- ggplot(memory1studiedD, aes (x = condition1, y = d)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
scale_y_continuous (name = "sensitivty (d') of CSs")
plotStudiedD
#test differences between conditions
#
### (3) critical lure d' (discriminability, index of the amount of memory information encoded for critical lures when the corresponding list was studied relative to when it was not studied)
#z[hit rate critical lures = GS] - z[false alarm rate critical lure controls = distractor]-> see Gunter et al., 2007; Huff & Bodner, 2013
#-1: always responding "old" to distractor and "new" to GS, see Colbert & McBride, 2007
# 1: always responding "new" to distractor and "old" to GS
memory1unstudiedD <- memory1Prop[memory1Prop$type == "GSold",]
names(memory1unstudiedD)[names(memory1unstudiedD) == "propZ"] <- "propZCS"
memory1unstudiedD$propZDis <- memory1Prop$propZ[memory1Prop$type == "distractor"]
memory1unstudiedD$d <- memory1unstudiedD$propZCS - memory1unstudiedD$propZDis
memory1unstudiedD$type <- NULL
memory1unstudiedD
plotUnstudiedD <- ggplot(memory1unstudiedD, aes (x = condition1, y = d)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
#geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
#              position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
scale_y_continuous (name = "sensitivty (d') of GSs")
plotUnstudiedD
### (4) lambda (bias/ "monitoring"; index of how stringent strategic monitoring standards were at test)
#z[1 - false alarm rate distractor] -> see Gunter et al., 2007; Huff & Bodner, 2013
#higher lambda scores: index of more rigorous strategic monitoring standards applied to test (less often "old" response)
memory1Lambda <- memory1Prop[memory1Prop$type == "distractor",]
memory1Lambda$distr <- 1 - memory1Lambda$propAdj
memory1Lambda$lambda <- scale(memory1Lambda$distr, center = TRUE, scale = TRUE)
memory1Lambda
# memory2 task ------------------------------------------------------------
#exclude timeouts
table(memory2$timeout)
memory2 <- memory2[memory2$timeout == "false",]
table(memory2$timeout)
#convert variables
memory2$type <- factor(memory2$type)
memory2$memoryResp <- as.numeric(memory2$memoryResp)
#check condition assignment
table(memory2$condition2)
### (1) calculate proportions of "old" responses
# correct recognition of studied items (CSs) -> true recognition
# incorrect response "old" to critical lures (GSs) -> false recognition
#0 new
#1 old
memory2Prop <- aggregate(memoryResp ~ subject + condition2 + type, memory2, sum)
memory2Prop$nr <- aggregate(memoryResp ~ subject + condition2 + type, memory2, length)[[4]]
memory2Prop$prop <- (memory2Prop$memoryResp/memory2Prop$nr)
head(memory2Prop)
memory2Prop$se <- aggregate(prop ~ subject + condition2 + type, memory2Prop, se)[[4]]
#plot proportion of "old" responses - boxplot
aggregate(prop ~ condition2 + type, memory2Prop, mean)
aggregate(prop ~ condition2 + type, memory2Prop, se)
barplotData <- aggregate(prop ~ condition2 + type, memory2Prop, mean)
barplotData$se <- aggregate(prop ~ condition2 + type, memory2Prop, se)[[3]]
#plot proportion of "old" responses - barplot
plotmemory2PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition2)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Food Items") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory2PropOld
irect$response <- as.numeric(direct$response)
plotDirect <- aggregate(response ~ cs_selected + category, direct, mean)
aggregate(response ~ cs_selected + category, direct, sd)
plotDirect$se <- aggregate(response ~ cs_selected + category, direct, se)[[3]]
plotDirect <- ggplot(plotDirect, aes (x = cs_selected, y = response, fill = category)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Stimulus rating") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Categories") +
scale_y_continuous (name = "rating")
plotDirect
memory1Prop <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, sum)
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, length)[[4]]
memory1Prop$prop <- (memory1Prop$memoryResp/memory1Prop$nr)
memory1Prop
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, length)[[5]]
memory1Prop <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, sum)
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, length)[[5]]
memory1Prop$prop <- (memory1Prop$memoryResp/memory1Prop$nr)
memory1Prop
head(memory1Propo)
head(memory1Prop)
aggregate(prop ~ condition1 + type, memory1Prop, mean)
plotmemory1PropOld
aggregate(prop ~ condition1 + type, memory1Prop, mean)
head(dat)
head(olddat)
################### Pre-Test DRM
### february, 2021
### Kathrin Reichmann
setwd("C:/Users/reich/Documents/GitHub/CScond_PreTest/data")
#setwd("\\\\sn00.zdv.uni-tuebingen.de/siskr01/Documents/Github/CScond_Exp2/data")
library(dplyr)
library(tidyverse)
library(ggplot2)
##### import:
#single data files
##### export:
#direct.csv
#memory1.csv
#memory2.csv
#Functions
CI <- function(x) qnorm(0.975)*sd(x)/sqrt(length(x))
se <- function(x) sd(x)/sqrt(length(x))
# read files --------------------------------------------------------------
filenames <- dir()
dat <- data.frame()
for (i in filenames){
dat <- rbind(dat, read.table(i, header = TRUE, sep = ",", encoding = "UTF-8"))
}
rm (filenames, i)
length(unique(dat$subject))
comments_one <- dat$responses[dat$trial_type == "survey-text" & dat$condition2 == "one_one"]
#comments_one
comments_many <- dat$responses[dat$trial_type == "survey-text" & dat$condition2 == "many_one"]
#comments_many
# exclude participants --------------------------------------------------------
#total number of subjects before data exclusion
length(unique(dat$subject))
#chinese speaking participants
#0 = ja, 2 = keine Angabe
get_tables <- aggregate(response ~ subject + chinese, dat, mean)
table(get_tables$chinese)
dat <- dat[!dat$chinese == 0,]
#participants who did not pay attention
get_tables <- aggregate(response ~ subject + hinschauen, dat, mean)
table(get_tables$hinschauen) #1 = nicht hinschauen
dat <- dat[!dat$hinschauen == 1,]
#who were distracted
get_tables <- aggregate(response ~ subject + ablenkung, dat, mean)
table(get_tables$ablenkung) # 0 = abgelenkt
#dat <- dat[!dat$ablenkung == 0,]
#who did not follow instructions
get_tables <- aggregate(response ~ subject + gewissenhaft, dat, mean)
table(get_tables$gewissenhaft) # 1 = nicht gewissenhaft
dat <- dat[!dat$gewissenhaft == 1,]
#total number of subjects after data exclusion
length(unique(dat$subject))
#Auschluss von 32 VP
table(dat$gender)
demographics <- dat[unique(dat$subject),]
demographics
unique(dat$subject)
demographics <- dat[dat$subject == unique(dat$subject),]
demographics
table(demographics$gender)
unique(demographics$subject)
demographics$subject
demographics <- dat[c('subject', 'age', 'gender', 'education', 'handedness')]
demographics <- dat[c('subject', 'age', 'gender', 'education')]
str(dat)
source('~/GitHub/CSCond_analysis/Study2_DRM/preTest_analysis.R', echo=TRUE)
table(demographics$gender)
table(demographics$eduction)
str(demographics)
demographics$education
table(demographics$education)
table(demographics$age)
mean(demographics$age)
demographics$age <- as.numeric(demographics$age)
mean(demographics$age)
emographics <- dat[c('subject', 'age', 'gender', 'education')]
demographics <- aggregate(. ~ subject, demographics, median);
str(demographics)
as.numeric(demographics$age)
mean(as.numeric(demographics$age))
age <- as.numeric(demographics$age) %>%
mean()
age
age <- as.numeric(demographics$age) %>%
mean() %>%
sd()
age
age <- as.numeric(demographics$age) %>%
mean()
age$sd <- as.numeric(demographics$age) %>%
sd()
age
age$mean <- as.numeric(demographics$age) %>%
mean()
age$sd <- as.numeric(demographics$age) %>%
sd()
age
#delete irrelevant columns
olddat <- dat
dat <- dat[c("trial_index", "task", "subject", "condition1", "condition2", "type", "category", "response", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#variable cs_selected
as.factor(gsub(".png$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub(".jpg$", "", dat$cs_selected))-> dat$cs_selected
as.factor(gsub("category", "", dat$cs_selected))-> dat$cs_selected
#transform to factor
as_factor <- c("subject", "condition1", "condition2", "type", "category", "timeout", "nr_pres","cs_selected")
for (factor in as_factor){
dat[, factor] <- as.factor(dat[,factor])
}
str(dat)
#separate data for three tasks
direct <- dat[dat$task == "direct",]
direct <- direct[c("trial_index", "task", "subject", "type", "category", "response", "rt", "cs_selected")]
memory1 <- dat[dat$task == "memory1",]
memory1 <- memory1[c("trial_index", "task", "subject", "condition1", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
memory2 <- dat[dat$task == "memory2",]
memory2 <- memory2[c("trial_index", "task", "subject", "condition2", "type", "category", "rt", "timeout", "memory", "memoryResp", "nr_pres","memoryCorrect", "cs_selected")]
#export data files
setwd("C:/Users/reich/Documents/GitHub/CSCond_analysis/Study2_DRM/data_preprocessed")
write.csv2(direct, file = 'direct.csv')
write.csv2(memory1, file = 'memory1.csv')
write.csv2(memory2, file = 'memory2.csv')
# learning phases ---------------------------------------------------------
#presentation order and stimulus assignment
learning1 <- dat[dat$task == "learning1",]
learning1 <- learning1[c("subject", "trial_index", "cs_selected")]
learning1
learning2 <- dat[dat$task == "learning2",]
learning2 <- learning2[c("subject", "trial_index", "cs_selected")]
learning2$trial_index <- learning2$trial_index - 75
# "evaluation" filler task -----------------------------------------------------------
direct$response <- as.numeric(direct$response)
plotDirect <- aggregate(response ~ cs_selected + category, direct, mean)
aggregate(response ~ cs_selected + category, direct, sd)
plotDirect$se <- aggregate(response ~ cs_selected + category, direct, se)[[3]]
plotDirect <- ggplot(plotDirect, aes (x = cs_selected, y = response, fill = category)) +
geom_bar(stat = 'identity', position = position_dodge(), show.legend = TRUE) +
geom_errorbar(aes(ymin= response - se, ymax= response + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Stimulus rating") +
scale_fill_brewer(palette = "Paired") +
theme_classic() +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Categories") +
scale_y_continuous (name = "rating")
plotDirect
table(memory1$timeout)
memory1 <- memory1[memory1$timeout == "false",]
table(memory1$timeout)
#convert variables
memory1$type <- factor(memory1$type)
memory1$memoryResp <- as.numeric(memory1$memoryResp)
#check condition assignment
table(memory1$condition1)
### (1) calculate proportions of "old" responses
# correct recognition of studied items (CSs) -> true recognition
# incorrect response "old" to critical lures (GSs) -> false recognition
#0 new
#1 old
memory1Prop <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, sum)
memory1Prop$nr <- aggregate(memoryResp ~ subject + condition1 + type + category, memory1, length)[[5]]
memory1Prop$prop <- (memory1Prop$memoryResp/memory1Prop$nr)
head(memory1Prop)
memory1Prop$se <- aggregate(prop ~ subject + condition1 + type + category, memory1Prop, se)[[4]]
head(memory1Prop)
memory1Prop$se <- aggregate(prop ~ subject + condition1 + type + category, memory1Prop, se)[[5]]
head(memory1Prop)
#plot proportion of "old" responses - barplot
barplotData <- aggregate(prop ~ condition1 + type, memory1Prop, mean)
barplotData$se <- aggregate(prop ~ condition1 + type, memory1Prop, se)[[3]]
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
#test for true recognition
trueRec1 <- memory1Prop[memory1Prop$type == "CS",]
plotmemory1PropOld
barplotData$se <- aggregate(prop ~ condition1 + type, memory1Prop + category, se)[[3]]
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[3]]
head(barplotCat)
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[4]]
head(barplotCat)
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
facet_grid( . ~ category)
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
facet_grid( . ~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid( . ~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
par (mfrow = c(2,2))
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid( . ~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
barpotCat1 <- barplotCat[barplotCat$category == "1",]
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
par (mfrow = c(2,2))
barpotCat1 <- barplotCat[barplotCat$category == "1",]
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
barpotCat1 <- barplotCat[barplotCat$category == "1",]
par (mfrow = c(2,2))
barpotCat1 <- barplotCat[barplotCat$category == "1",]
plotmemory1PropOld <- ggplot(barplotCat1, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
barpotCat1 <- barplotCat[barplotCat$category == "1",]
plotmemory1PropOld <- ggplot(barplotCat1, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld <- ggplot(barplotCat1, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ category)
barplotCat <- barplotCat[barplotCat$type == "CSnonpred",]
barplotCat <- barplotCat[barplotCat$type == "CSpred",]
head(barplotCat)
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[4]]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[4]]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" | "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" | arplotCat$type == "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" | barplotCat$type == "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" |!barplotCat$type == "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[4]]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" |!barplotCat$type == "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred" && barplotCat$type == "GSnew",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
head(barplotCat)
barplotCat <- aggregate(prop ~ condition1 + type + category, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + category, memory1Prop, se)[[4]]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
barplotCat <- barplotCat[!barplotCat$type == "GSnew",]
head(barplotCat)
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ category) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
for(line in 1:dim(memory1Prop)[1]){
if (memory1Prop$prop[line] == 0){
memory1Prop$propAdj[line] <- 1/(2*nItems)
} else if (memory1Prop$prop[line] == 1){
memory1Prop$propAdj[line] <- 1 - (1/(2*nItems))
}
}
#z-standardization of scores
memory1Prop$propZ <- scale(memory1Prop$propAdj, center = TRUE, scale = TRUE)
head(memory1Prop$propZ)
head(memory1Prop$prop)
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ subject) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
#test for true recognition
trueRec1 <- memory1Prop[memory1Prop$type == "CS",]
barplotCat <- aggregate(prop ~ condition1 + type + subject, memory1Prop, mean)
barplotCat$se <- aggregate(prop ~ condition1 + type + subject, memory1Prop, se)[[4]]
barplotCat <- barplotCat[!barplotCat$type == "CSnonpred",]
barplotCat <- barplotCat[!barplotCat$type == "CSpred",]
barplotCat <- barplotCat[!barplotCat$type == "GSnew",]
head(barplotCat)
plotmemory1PropOld <- ggplot(barplotCat, aes (x = type, y = prop, fill = condition1)) +
facet_grid(.~ subject) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
