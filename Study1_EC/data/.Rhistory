theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("DRM - Chinese Characters") +
scale_fill_brewer(palette = "Dark2") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "GnBu") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "Type") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Oranges") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Set3") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "RdYiBu") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "RdYlBu") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "RdYlGn") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()
plotmemory1PropOld
head(memory1Prop)
dim(memory1Prop)
170*3
manovaMemory$CS <- memory1Prop$prop[memory1Prop$type == "CS"]
manovaMemory$GS <- memory1Prop$prop[memory1Prop$type == "GS"]
manovaMemory$Distractor <- memory1Prop$prop[memory1Prop$type == "Distractor"]
manovaMemory <- manovaMemory[1:length(unique(manovaMemory$subject)), ]
#MANOVA
manovaMemory <- []
manovaMemory$CS <- memory1Prop$prop[memory1Prop$type == "CS"]
#MANOVA
manovaMemory$CS <- memory1Prop$prop[memory1Prop$type == "CS"]
manovaData
head(memory1)
head(memory1Prop)
#MANOVA
manovaMemory <- subset(dataDirect, select = -c(subject, type, memoryResp, nr))
#MANOVA
manovaMemory <- subset(memory1Prop, select = -c(subject, type, memoryResp, nr))
manovaMemory$CS <- memory1Prop$prop[memory1Prop$type == "CS"]
manovaMemory$GS <- memory1Prop$prop[memory1Prop$type == "GS"]
manovaMemory$Distractor <- memory1Prop$prop[memory1Prop$type == "Distractor"]
manovaMemory <- subset(memory1Prop, select = -c(type, memoryResp, nr))
manovaMemory$CS <- memory1Prop$prop[memory1Prop$type == "CS"]
manovaMemory$GS <- memory1Prop$prop[memory1Prop$type == "GS"]
manovaMemory$Distractor <- memory1Prop$prop[memory1Prop$type == "Distractor"]
manovaMemory[1:length(unique(manovaMemory$subject)), ]
length(unique(manovaMemory$subject))
manovaMemory <- manovaMemory[1:length(unique(manovaMemory$subject)), ]
manovaData$prop <- NULL
manovaData$subject <- NULL
head(manovaData)
manovaMemory$prop <- NULL
manovaMemory$subject <- NULL
head(manovaMemory)
#homogeneity of covariance matrices
by(manovaData[,2:5], manovaData$condition1, cov)
#homogeneity of covariance matrices
by(manovaData[,2:4], manovaData$condition1, cov)
#homogeneity of covariance matrices
by(manovaMemory[,2:4], manovaMemory$condition1, cov)
#put multiple outcomes in the model
outcome <- cbind(manovaMemory$CS, manovaMemory$GS, manovaMemory$Distractor)
#calculate the model
memoryModel <- manova(outcome ~ condition1, data = manovaData)
aq.plot(manovaMemory[,2:5])
aq.plot(manovaMemory[,2:4])
#put multiple outcomes in the model
outcome <- cbind(manovaMemory$CS, manovaMemory$GS, manovaMemory$Distractor)
#calculate the model
memoryModel <- manova(outcome ~ condition1, data = manovaMemory)
summary(conditionModel)
summary(conditionModel, test = "Wilks")
summary(conditionModel, test = "Hotelling")
summary(memoryModel)
summary(memoryModel, test = "Wilks")
summary(memoryModel, test = "Hotelling")
summary(memoryModel, test = "Roy")
dim(manovaMemory)
#calculate the model
memoryModel <- manova(outcome ~ condition1, data = manovaMemory)
summary(memoryModel)
summary(memoryModel, test = "Wilks")
summary(memoryModel)
str(memory1Prop)
#CS
lm1 <- lm(prop ~ condition1, memory1Prop[memory1Prop$type == "CS",])
summary(lm1)
anova(lm1)
lm1
lm2 <- lm(prop ~ condition1, memory1Prop[memory1Prop$type == "GS",])
summary(lm2)
anova(lm2)
lm3 <- lm(prop ~ condition1, memory1Prop[memory1Prop$type == "Distractor",])
summary(lm3)
#many as the reference category
memory1Prop$condition1 <- factor(memory1Prop$condition1, levels = ("many", "one", "fill"))
#many as the reference category
memory1Prop$condition1 <- factor(memory1Prop$condition1, levels = c("many", "one", "fill"))
#CS
lm1 <- lm(prop ~ condition1, memory1Prop[memory1Prop$type == "CS",])
summary(lm1)
anova(lm1)
lm3 <- lm(prop ~ condition1, memory1Prop[memory1Prop$type == "Distractor",])
summary(lm3)
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic(plot.title = element_text (hjust = 0.5, face = "bold", size = 12))
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()+
theme (plot.title = element_text (hjust = 0.5, face = "bold", size = 12))
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()+
theme (plot.title = element_text (hjust = 0.5, face = "bold", size = 14),
text = element_text(size=20))
plotmemory1PropOld
##Plot generalization stimuli
plotmemory1PropOld <- ggplot(barplotData, aes (x = type, y = prop, fill = condition1)) +
geom_bar (stat = "identity", position = position_dodge()) +
geom_errorbar(aes(ymin= prop - se, ymax= prop + se), width=.2,
position=position_dodge(.9)) +
ggtitle("Recognition Memory") +
scale_fill_brewer(palette = "Blues") +
theme(plot.title = element_text (hjust = 0.5, face = "bold", size = 12)) +
labs(fill = "Condition") +
scale_y_continuous (name = "Proportion of 'old' responses\n") +
scale_x_discrete(name = "\nType") +
theme_classic()+
theme (plot.title = element_text (hjust = 0.5, face = "bold", size = 16),
text = element_text(size=14))
plotmemory1PropOld
head(memory1Prop)
glm1 <- glm(memoryResp ~ condition1, memory1Prop[memory1Prop$type == "CS",], family = 'binomial')
glm1 <- glm(memoryResp ~ condition1, memory1[memory1$type == "CS",], family = 'binomial')
summary(glm1)
memory1$condition1 <- factor(memory1$condition1, levels = c("many", "one", "fill"))
glm1 <- glm(memoryResp ~ condition1, memory1[memory1$type == "CS",], family = 'binomial')
summary(glm1)
exp(1.5629)/(1+exp(1.5629)) #many_one
glm2 <- glm(memoryResp ~ condition1, memory1[memory1$type == "GS",], family = 'binomial')
summary(glm2)
glm3 <- glm(memoryResp ~ condition1, memory1[memory1$type == "Distractor",], family = 'binomial')
summary(glm3)
exp(-2.1535)/(1+exp(--2.1535)) #many_one
exp(-2.1535)/(1+exp(-2.1535)) #many_one
exp(-0.91457)/(1+exp(-0.9145)) #many_fill
exp(0.5491)/(1+exp(0.5491)) #many_fill
glm2 <- glm(memoryResp ~ condition1, memory1[memory1$type == "GS",], family = 'binomial')
summary(glm2)
exp(-0.09607)/(1+exp(-0.09607)) #many_one
exp(-0.33737)/(1+exp(-0.33737)) #many_fill
exp(-1.37723)/(1+exp(-1.37723))#one_one
exp(-2.1535)/(1+exp(-2.1535)) #many_one
exp(0.5491)/(1+exp(0.5491)) #many_fill
summary(glm3)
memory1$type
glm3 <- glm(memoryResp ~ condition1, memory1[memory1$type == "Distractor",], family = 'binomial')
summary(glm3)
exp(-0.9145)/(1+exp(-0.9145))#one_one
exp(0.5491)/(1+exp(0.5491)) #one_one
exp(-0.5491)/(1+exp(-0.5491)) #one_one
exp(0.5491)/(1+exp(0.5491)) #one_one
exp(1.5629)/(1+exp(1.5629)) #many_one
exp(-0.1134)/(1+exp(-0.1134)) #many_fill
exp(1.2344)/(1+exp(1.2344))#one_one
glm1 <- glm(memoryResp ~ condition1, memory1[memory1$type == "CS",], family = 'binomial')
summary(glm1)
exp(1.5629)/(1+exp(1.5629)) #many_one
exp(-0.1134)/(1+exp(-0.1134)) #many_fill
exp(1.2344)/(1+exp(1.2344))#one_one
glm2 <- glm(memoryResp ~ condition1, memory1[memory1$type == "GS",], family = 'binomial')
summary(glm2)
exp(-0.09607)/(1+exp(-0.09607)) #many_one
exp(-0.33737)/(1+exp(-0.33737)) #many_fill
exp(-1.37723)/(1+exp(-1.37723))#one_one
glm1 <- glm(memoryResp ~ condition1, memory1[memory1$type == "CS",], family = 'binomial')
summary(glm1)
glm1 <- glm(memoryResp ~ condition1, memory1[memory1$type == "CS",], family = 'binomial')
summary(glm1)
glm <- glm(memoryResp ~ condition1*type, memory1, family = 'binomial')
summary(glm)
#simple slopes
lm <- lm (diff ~ condition*type_specfici, HLM)
#simple slopes
lm <- lm (diff ~ condition*type_soecific, HLM)
#simple slopes
lm <- lm (diff ~ condition*type_specific, HLM)
summary(lm)
str(HLM)
library(dplyr)
library(tidyverse)
library(ggplot2)
library(lme4)
library(mvoutlier) #outlier analysis
#Functions
CI <- function(x) qnorm(0.975)*sd(x)/sqrt(length(x))
se <- function(x) sd(x)/sqrt(length(x))
# generalization: direct evaluative measure -------------------------------
### set working directory:
#setwd("\\\\sn00.zdv.uni-tuebingen.de/siskr01/Documents/Github/CSCond_analysis/CSCond_analysis/data")
setwd("C:/Users/reich/Documents/GitHub/CSCond_analysis/Study1_EC/data")
direct <- read.csv2('direct.csv', header = TRUE)
str(direct)
as_factor <- c("subject", "val", "condition_code", "condition", "measure", "measure_code", "type", "type_specific", "category", "cs_selected")
for (factor in as_factor){
direct[, factor] <- as.factor(direct[,factor])
}
direct$type_specific <- factor(direct$type_specific, levels = c("CS", "GS same", "GS different", "Feature", "Group"))
## randomly select 1 CSs for many_one:
new_one <- direct[direct$condition == "one_one",]
new_many <- direct[direct$condition == "many_one",]
new_many <- new_many[!new_many$type_specific == "CS",]
new_direct <- rbind(new_one, new_many)
for (subject in unique(direct$subject)){
if (direct$condition[direct$subject == subject] == "many_one"){
for (cat in 1:4){
temp <- direct[direct$subject == subject & direct$type_specific == "CS" & direct$category == cat,]
select <- temp[1,]
new_direct <- rbind(new_direct, select)
}
}
}
#right now: do not take different targets into account (participants are nested within targets)
temp <- aggregate(response ~ subject + condition + val + type_specific + category, new_direct, mean)
temp$nr_obs <- aggregate(response ~ subject + condition + val + type_specific + category, new_direct, length)[[6]]
## order data
temp <- temp[order(temp$subject, temp$val, temp$type_specific),]
## cbind positive and negative scores
HLMpos <- temp[temp$val == "pos",]
HLMpos$pos <- HLMpos$response
HLMpos$response <- NULL
HLMneg <- temp[temp$val == "neg",]
HLMneg$neg <- HLMneg$response
HLM <- cbind(HLMpos, HLMneg$neg, HLMneg$category)
HLM$val <- NULL
HLM$neg <- HLM$`HLMneg$neg`
HLM$`HLMneg$neg` <- NULL
## calculate difference scores
HLM$diff <- HLM$pos - HLM$neg
#look only at "CS" and "GS"
HLM <- HLM[!HLM$type_specific =="GS different", ]
HLM <- HLM[!HLM$type_specific == "Group",]
HLM <- HLM[!HLM$type_specific == "Feature",]
## rename many_one to many and one_one to one
HLM$condition <- factor(HLM$condition, labels = c("many", "one"), levels = c("many_one", "one_one"))
##categorical variable: generalization as discrete
HLM$type_discrete <- factor(HLM$type_specific, labels = c("CS", "GS"), levels = c("CS", "GS same"))
#reverse dummy coding for condiiton
HLM$condition <- factor(HLM$condition, labels = c("one", "many"), levels = c("one", "many"))
#simple slopes
lm <- lm (diff ~ condition*type_specific, HLM)
summary(lm)
### example from Lane & Hennes (2018)
#packages
library(arm)
library(lme4)
library(lmerTest)
#generate data
J <- 2 # nr. of person IDs
K <- 200 #measuurements per person
ex1.fake <- function(J, K){
#set up predictors (use mean and variance )
time <- rep (seq (1, K, length = K), J) #K measurements per person
person <- rep (1:J, each = K) #J person IDs
phase <- rnorm (J*K, 0, .17) #whether or not it was the week before the exam (within)
lanx <- rnorm (J*K, 0, .5) # previous measurment point anxiety (btw) covariate
prov <- rnorm (J*K, 0, .24) #if partner provided support or not (btw)
rec <- sqrt (.25)*((1-(.21*.21))*rnorm (J*K, 0, 1) + sqrt (.21) * prov) #receipt: whether participant received support
#fixed effects (values from previous model)
b0 <- .14   #true intercept value
b1 <- -.50  #true estimate lag anxiety (covariate)
b2 <- .40   #true estimate phase ?
b3 <- -.04  #true estimate provision
b4 <- .12   #true estimate receipt
b5 <- -0.3  #true estimate phase * provision
b6 <- .17   #true estimate phase * receipt
#random effects (taken from the previous paper. variance, not standard deviations!)
vsub.b0 <- .094 #random intercept
vsub.b1 <- .022 #random slope lag anxiety
vsub.b4 <- .052 #random slope receipt
vresid <- .420  #btw person variance in anxiety
#per person (use fixed effect as mean, and random effect as standard deviation)
b0.int <- rnorm (J, b0, sqrt (vsub.b0)) # intercept for every participant
b1.laganx <- rnorm (J, b1, sqrt (vsub.b1)) #slope for lag anxiety for every participant
b4.rec <- rnorm (J, b4, sqrt (vsub.b4)) #slope for receipt for every participant
#generate depend measure based on the true estimates of the model
anx <- rnorm (J*K, b0.int[person]
+ b1.laganx[person]*lanx
+ b2 * phase
+ b3 * prov
+ b4.rec[person]*rec
+ b5 * phase * prov
+ b6 * phase * rec
, sqrt (vresid)) #residual
return (data.frame(person, time, phase, prov, rec, lanx , anx))
}
#generate example dataset with 68 people and 21 measurement time points (Observations per participant)
data <- ex1.fake(68, 21)
#model
lme.power <- lmer(anx ~ lanx + phase + prov + rec + prov * phase + rec * phase + (1| person) + (-1 + lanx| person) + (-1 + rec | person), data = data)
summary(lme.power)
#loop data generation and analyze it
ex1.power <- function (J, K, n.sims = 1000){
signif <- rep (NA, n.sims) #vector that will record if the effect of interest is significant
for (s in 1:n.sims){
fake <- ex1.fake(J, K)  #generate fake data set in every simulation round
lme.power <- lmer (anx ~ lanx + phase + prov + rec + prov*phase + rec * phase + (1|person) + (-1 + lanx| person) + (-1 + rec| person), data = fake)
est <- fixef (lme.power)["rec"] #save parameter estimate
se <- se.fixef(lme.power)["rec"] #save standard error
signif[s] <- (abs(est)-2*se) > 0 #calculate significance: returns TRUE/FALSE
}
power <- mean(signif)
return (power)
}
#power analysis
ex1.power(J = 68, K = 32, n.sims = 1000)
Nvals <- c (68, 102, 136, 170, 204)
Kvals <- c(32, 48, 64, 80, 96)
sample.sizes <- expand.grid(Nvals, Kvals)
sample.sizes
names(sample.sizes) <- c("N", "K")
library(ggplot2)
#sample sizes to examine
Nvals <- c (68, 102, 136, 170, 204)
Kvals <- c(32, 48, 64, 80, 96)
sample.sizes <- expand.grid(Nvals, Kvals)
names(sample.sizes) <- c("N", "K")
#store results
powevals <- rep(NA, nrow(sample.sizes))
#power for each combination of N and K
for (i in 1:nrow(sample.sizes)) {
temp <- as.numeric(sample.sizes[i,])
temppow <- ex1.power(temp[1], temp [2], 50) #50 simulations per combinatinons
powvals[i] <- temppow
}
#results
powvals
#plot results
ggplot(sample.sizes, aes (x = N, y = powvals)) +
geom_line() +
facet_wrap (~K) +
xlab ("Participant Sample Size") +
ylab ("Power")
powvals <- rep(NA, nrow(sample.sizes))
#power for each combination of N and K
for (i in 1:nrow(sample.sizes)) {
temp <- as.numeric(sample.sizes[i,])
temppow <- ex1.power(temp[1], temp [2], 50) #50 simulations per combinatinons
powvals[i] <- temppow
}
#results
powvals
#plot results
ggplot(sample.sizes, aes (x = N, y = powvals)) +
geom_line() +
facet_wrap (~K) +
xlab ("Participant Sample Size") +
ylab ("Power")
