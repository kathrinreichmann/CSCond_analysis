mh.1 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
d2$weight
#take a look at the posterior distribution
precis(mh.1)
#look up requested values
mu_at_45 <- post$a + post$b*(45 - xbar)
mu_at_45
post <- extract.samples(mh.1)
#look up requested values
mu_at_45 <- post$a + post$b*(45 - xbar)
mu_at_45
dens(mu_at_45, col = rangi2, xlab = "mu|weight = 50")
mean(mu_at_45)
median(mu_at_45)
PI(mu_at_45, prob = 0.89)
#50
mu_at_50 <- post$a + post$b (50-xbar)
mean(mu_at_50)
#50
mu_at_50 <- post$a + post$b*(50-xbar)
mean(mu_at_50)
PI(mu_at_50, probg = 0.89)
PI(mu_at_50, prob = 0.89)
mu_at_65 <- post$a + post$b*(65-xbar)
mean(mu_at_65)
PI(mu_at_65, prob = 0.89)
#31
mu_at_31 <- post$a + post$b*(31-xbar)
mean(mu_at_31)
PI(mu_at_31, prob = 0.89)
####task 2: height ~ log (weight)
dim(d)
dim(d)
#define average weight
xbar <- mean(d$weight)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(log(weight) - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#plot posterior predictions against the raw data
plot(height ~ weight, data = d, col = rangi2)
#sample from posterior
post <- extract.samples(mh.2)
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$b)
curve(a_map + b_map * (x - xbar), add = TRUE)
#use log of weight
d$weightLog <- log(d$weight)
#use log of weight
d$weightLog <- log(d$weight)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weightLog - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$b)
curve(a_map + b_map * (x - xbar), add = TRUE)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weightLog - xbar),
a ~ dnorm(178, 20),
log_b ~ dnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weightLog - xbar),
a ~ dnorm(178, 20),
log_b ~ dnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
#use log of weight
d$weightLog <- log(d$weight)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + log_b*(weightLog - xbar),
a ~ dnorm(178, 20),
log_b ~ dnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
d$weightLog <- log(d$weight)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + log_b*(weightLog - xbar),
a ~ dnorm(178, 20),
log_b ~ dnorm(0,1),
sigma ~ dunif (0,50)
),
data = d,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + exp(log_b)*(weightLog - xbar),
a ~ dnorm(178, 20),
log_b ~ dnorm(0,1),
sigma ~ dunif (0,50)
),
data = d,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
h_sim <- sim (mh.1, data = dat)
str(h_sim)
dat <- data.frame( weight = c(45, 50, 65, 31))
h_sim <- sim (mh.1, data = dat)
str(h_sim)
#summarize simulated heights
height.PI <- apply(sim.height, 2, PI, prob = 0.89)
#summarize simulated heights
height.PI <- apply(h_sim, 2, PI, prob = 0.89)
height.PI
#45
mu_at_45 <- post$a + post$b*(45 - xbar)
median(mu_at_45)
dens(mu_at_45, col = rangi2, xlab = "mu|weight = 50")
PI(mu_at_45, prob = 0.89)
mh.1 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
mu_at_45 <- post$a + post$b*(45 - xbar)
median(mu_at_45)
dens(mu_at_45, col = rangi2, xlab = "mu|weight = 50")
PI(mu_at_45, prob = 0.89)
#sample from posterior
post <- extract.samples(mh.1)
mu_at_45 <- post$a + post$b*(45 - xbar)
median(mu_at_45)
dens(mu_at_45, col = rangi2, xlab = "mu|weight = 50")
PI(mu_at_45, prob = 0.89)
str(h_sim)
dat <- data.frame( weight = c(45, 50, 65, 31))
h_sim <- sim (mh.1, data = dat)
str(h_sim)
#summarize simulated heights
height.PI <- apply(h_sim, 2, PI, prob = 0.89)
height.PI
PI(mu_at_45, prob = 0.89)
#summarize simulated heights
height.mean <- apply(h_sim, 2, mean)
height.mean
h_sim <- sim (mh.1, data = dat)
str(h_sim)
#summarize simulated heights
height.mean <- apply(h_sim, 2, mean)
height.PI <- apply(h_sim, 2, PI, prob = 0.89)
height.PI
dat$H89 <- height.PI[2,]
xbar <- mean(d2$weight)
#use quadratic approximation to predict heights
mh.1 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weight - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d2,
)
#take a look at the posterior distribution
precis(mh.1)
#a = a person 1 kg heaver is expected to be 0.90 cm taller
#sample from posterior
post <- extract.samples(mh.1)
#look up requested values
dat <- data.frame( weight = c(45, 50, 65, 31))
#use sim: relevant compatibility interval includes the Gaussian variance from sigma
h_sim <- sim (mh.1, data = dat)
str(h_sim)
#summarize simulated heights
height.mean <- apply(h_sim, 2, mean)
height.PI <- apply(h_sim, 2, PI, prob = 0.89)
#in table form:
dat$mean <- height.mean
dat$L89 <- height.PI[1,]
dat$H89 <- height.PI[2,]
dat
round(dat,1)
mu_at_31 <- post$a + post$b*(31-xbar)
mean(mu_at_31)
PI(mu_at_31, prob = 0.89)
#use log of weight
d$weightLog <- log(d$weight)
#define average weight
xbar <- mean(d$weightLog)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + log_b*(weightLog - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
dim(d)
#use log of weight
d$weightLog <- log(d$weight)
#define average weight
xbar <- mean(d$weightLog)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weightLog - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d,
)
#sample from posterior
post <- extract.samples(mh.2)
a_map <- mean(post$a)
b_map <- mean(post$log_b)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
curve(a_map + b_map * (x - xbar), add = TRUE)
mu <- sim(mh.2, data = list(weight = x_seq))
#sample from posterior
x_seq <- log(1:60)
mu <- sim(mh.2, data = list(weight = x_seq))
mu <- sim(mh.2, data = list(weightLog = x_seq))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI, prob = 89)
mu_PI <- apply(mu, 2, PI, prob = 0.89)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weightLog, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weight, data = d, col = rangi2)
#plot posterior predictions against the raw data
#raw data
plot(weight ~ height, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
d$weightLog <- log(d$weight)
#define average weight
xbar <- mean(d$weightLog)
#use quadratic approximation to predict heights: Plain linear regression
mh.2 <- quap(
alist(
height ~ dnorm (mu, sigma),
mu <- a + b*(weightLog - xbar),
a ~ dnorm(178, 20),
b ~ dlnorm(0,1),
sigma ~ dunif (0,50)
),
data = d,
)
#sample from posterior
x_seq <- log(1:60)
mu <- sim(mh.2, data = list(weightLog = x_seq))
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI, prob = 0.89)
#plot posterior predictions against the raw data
#raw data
plot(weight ~ height, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
#plot posterior predictions against the raw data
#raw data
plot(height ~ weight, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
#add
shade (mu_ci, exp(x_seq))
#add
shade (mu_PI, exp(x_seq))
mu <- sim(mh.2, data = list(weightLog = x_seq), n = le4) #incorporates the standard deviation sigma
mu_mean <- apply(mu, 2, mean)
mu_PI <- apply(mu, 2, PI, prob = 0.89) #calculate prediction intervals
#plot posterior predictions against the raw data
#raw data
plot(height ~ weight, data = d, col = rangi2)
#posterior predictions
lines(exp(x_seq), mu_mean)
#shade: area within which the model expects to find 89% of actual heights in the population, at each weight
shade (mu_PI, exp(x_seq))
rm(list = ls());
library(ndl);
library(ggplot2);
library(knitr);
library(ggpubr);
library(ggsci);
library(grid);
library(gridExtra);
library(cowplot);
library(plyr);
library(wesanderson);
library(data.table);
library(tinytex);
library(RColorBrewer);
#local directory
localGitDir <- 'C:/Users/reich/Documents/GitHub/CSCond_analysis/Simulation'
setwd(localGitDir);
#load RW functions
source("tools/my_rescorlawagner_suffix.R")
source("tools/my_rescorlawagner_prefix.R")
source("tools/prepare_data.R")
plot.bar <- function(mystims, saliency, condition){
if(condition == "suffix"){
print('suffix condition')
mybar <- my_rescorlawagner_suffix(mystims, saliency, type_plot = "bar")
round(mybar$Equilibriums,2)->mybar$Equilibriums
ggbarplot(mybar, "SingleCues", "Equilibriums",
fill = "SingleCues",
label = TRUE) +
scale_fill_manual(values = c("red" = "#e41a1c", "blue" = "#377eb8",
"purple"="#9400D3",
"d1" = "#4daf4a", "d2" = "#999999",
"d3" = "#ef8a62", "d4" = "#998ec3",
"d5" = "#000000")) +
ylim((min(mybar$Equilibriums)-.1),1) +
labs(x="", y="Associative strength")+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none");
return(mybar)
} else {
print('prefix condition')
mybar <- my_rescorlawagner_prefix(mystims, saliency, type_plot = "bar")
round(mybar$Equilibriums,2)->mybar$Equilibriums
ggbarplot(mybar, "unique.CueOutcome.", "Equilibriums",
fill = "unique.CueOutcome.",
label = TRUE) +
scale_fill_manual(values = c("red" = "#e41a1c", "blue" = "#377eb8",
"purple"="#9400D3",
"d1" = "#4daf4a", "d2" = "#999999",
"d3" = "#ef8a62", "d4" = "#998ec3",
"d5" = "#000000")) +
ylim((min(mybar$Equilibriums)-.1),1) +
labs(x="", y="Associative strength")+
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank(),
legend.position = "none");
}
}
plot_line <- function(mystims, saliency, condition){
if(condition == "suffix"){
print('suffix condition')
myline = my_rescorlawagner_suffix(mystims, saliency, type_plot = "line")
}else{
print('prefix condition');
myline = my_rescorlawagner_prefix(mystims, saliency, type_plot = "line")
}
p <- ggplot(data=myline, aes(x = Time, y = Weight, colour = CueOutcome)) +
geom_line() +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.border = element_blank(),
panel.background = element_blank()) +
#ylim(-0.4,1) +
labs(x="Trial", y="Associative strength", colour="Feature") +
scale_color_manual(values = c("red" = "#e41a1c", "blue" = "#377eb8",
"purple" = "#9400D3",
"d1" = "#4daf4a", "d2" = "#999999",
"d3" = "#ef8a62", "d4" = "#998ec3",
"d5" = "#000000"));
return(p)
}
#### file 1 ####
#This dataset simulates a scenario where participants don't recognize the low saliency feature as discriminating
#so they perceive all the features to be shared by all categories
myexp = read.csv(paste(localGitDir,"input/exp1.csv", sep = ''));
myexp
mystims <- prepare_data(myexp, condition = "suffix")
traceOutcomes=c("bim")
#### file 1 ####
#This dataset simulates a scenario where participants don't recognize the low saliency feature as discriminating
#so they perceive all the features to be shared by all categories
myexp = read.csv(paste(localGitDir,"/input/exp1.csv", sep = ''));
myexp
mystims <- prepare_data(myexp, condition = "suffix")
traceOutcomes=c("bim")
traceCues=c("blue", "red", "purple","d1", "d2", "d3")
saliency <- rep(0.1, length(traceCues));
plot_line(mystims, saliency, "suffix")
plot.bar(mystims, saliency, "suffix")
mystims <- prepare_data(myexp, condition = "prefix")
traceOutcomes=c("blue", "red",  "d1", "d2", "d3")
traceCues=c("dep")
saliency <- rep(0.1, length(traceOutcomes));
plot_line(mystims, saliency, "prefix")
